type Query {
    projects(filter: String, skip: Int, first: Int, orderBy: ProjectOrderByInput) : ProjectList!
    project(id: ID!) : Project
}

type Mutation {
    createProject(title: String!, description: String, repositoryUrl: String, projectUrl: String) : Project!
    updateProject(id: ID!, title: String, description: String, repositoryUrl: String, projectUrl: String) : Project!
    deleteProject(id: ID!) : Project
    addChild(parentId: ID!, title: String!, description: String, repositoryUrl: String, projectUrl: String) : Project!
    signup(email: String!, password: String!, name: String!) : AuthPayload
    login(email: String!, password: String!) : AuthPayload
}

type Subscription {
    newProject: Project,
    newSubproject: Project
}

type Project {
    id: ID!
    title: String!
    description: String
    repositoryUrl: String
    projectUrl: String
    createdBy: User
    parentProject: Project
    subprojects: [Project!]!
}

type ProjectList {
    projects: [Project!]!
    count: Int!
}

type AuthPayload {
    token: String
    user: User
}

type User {
    id: ID!
    name: String!
    email: String!
    projects: [Project!]!
}

enum ProjectOrderByInput {
    title_ASC,
    title_DESC,
    description_ASC,
    description_DESC,
    createdAt_ASC,
    createdAt_DESC
}